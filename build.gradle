/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'signing'
    id 'io.franzbecker.gradle-lombok' version '3.3.0'
}

group = 'io.github.satya64'
version = '1.0.0'
description = 'Java client library for MS Power BI REST APIs to provide access to Dashboards, Report, Groups, Datasets, generate embed tokens, etc.'

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
ext.url = 'https://satya64.github.io/powerbi-sdk-java/'
ext.nexusUrl = System.getenv("NEXUS_URL")
ext.nexusUsername = System.getenv("NEXUS_USERNAME")
ext.nexusPwd = System.getenv("NEXUS_PASSWORD")
ext.signingKey = System.getenv("SIGNING_SEC_KEY")
ext.signingPassword = System.getenv("SIGNING_PASSWORD")

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenLocal()
    jcenter()
}

task delombok(type: io.franzbecker.gradle.lombok.task.DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
    failOnError = false
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = rootProject.name
            version = version
            from components.java

            pom {
                name = 'Microsoft PowerBI Java SDK'
                packaging = 'jar'
                artifactId = rootProject.name
                description = project.description
                url = 'https://satya64.github.io/powerbi-sdk-java'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'satya64'
                        name = 'Satyanarayana Jamana'
                        email = 'satyan.jntuk@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/satya64/powerbi-sdk-java.git'
                    developerConnection = 'scm:git:ssh://github.com/satya64/powerbi-sdk-java.git'
                    url = 'https://github.com/satya64/powerbi-sdk-java'
                }
            }

        }
    }

    repositories {
        maven {
            credentials {
                username project.hasProperty('nexusUsername') ? project.property('nexusUsername').toString() : ''
                password project.hasProperty('nexusPwd') ? project.property('nexusPwd').toString() : ''
            }
            def nexU = project.hasProperty('nexusUrl') ? project.property('nexusUrl').toString() : ''
            def releasesRepoUrl = "${nexU}/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "${nexU}/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

task stuffZip(type: Zip) {
    archiveBaseName = "stuff"
    from "src/stuff"
}

stuffZip.onlyIf {!project.hasProperty('skipSign')}

signing {
    if (isReleaseVersion && !project.hasProperty('skipSign')) {
        def signingKey = System.getenv("SIGNING_SEC_KEY")
        def signingPassword = System.getenv("SIGNING_PASSWORD")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign stuffZip
        sign publishing.publications.mavenJava
    }
}

dependencies {
    implementation 'com.microsoft.rest:client-runtime:1.7.1'
    implementation 'com.squareup.retrofit2:retrofit:2.8.1'
    implementation 'com.squareup.okhttp3:okhttp:4.5.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.5.0'
    implementation 'org.slf4j:slf4j-simple:1.7.30'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.9'
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation("com.squareup.okhttp3:mockwebserver:4.5.0")
}
